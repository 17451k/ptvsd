from datetime import datetime
from textwrap import dedent
import unittest

from debugger_protocol.schema import UPSTREAM
from debugger_protocol.schema.upstream import Metadata


class Stringlike:

    def __init__(self, value):
        self.value = value

    def __str__(self):
        return self.value


class Hash(Stringlike):
    pass


class MetadataTests(unittest.TestCase):

    def test_parse_minimal(self):
        expected = Metadata('https://x.y.z/schema.json',
                            'abcdef0123456789',
                            'deadbeefdeadbeefdeadbeefdeadbeef',
                            datetime(2018, 1, 9, 13, 10, 59),
                            )
        meta = Metadata.parse(dedent("""
            upstream: https://x.y.z/schema.json
            revision: abcdef0123456789
            checksum: deadbeefdeadbeefdeadbeefdeadbeef
            date:     2018-01-09 13:10:59 (UTC)
            """))

        self.assertEqual(meta, expected)

    def test_parse_with_whitespace_and_comments(self):
        expected = Metadata('https://x.y.z/schema.json',
                            'abcdef0123456789',
                            'deadbeefdeadbeefdeadbeefdeadbeef',
                            datetime(2018, 1, 9, 13, 10, 59),
                            )
        meta = Metadata.parse(dedent("""

            # generated by x.y.z
            upstream: https://x.y.z/schema.json

            revision: abcdef0123456789
             checksum: deadbeefdeadbeefdeadbeefdeadbeef
            date:	2018-01-09 13:10:59 (UTC)
              
              # done!

            """))  # noqa

        self.assertEqual(meta, expected)

    def test_parse_roundtrip_from_object(self):
        orig = Metadata('https://x.y.z/schema.json',
                        'abcdef0123456789',
                        'deadbeefdeadbeefdeadbeefdeadbeef',
                        datetime(2018, 1, 9, 13, 10, 59),
                        )
        meta = Metadata.parse(
            orig.format())

        self.assertEqual(meta, orig)

    def test_parse_roundtrip_from_string(self):
        orig = dedent("""\
            upstream: https://x.y.z/schema.json
            revision: abcdef0123456789
            checksum: deadbeefdeadbeefdeadbeefdeadbeef
            date:     2018-01-09 13:10:59 (UTC)
            """).format(UPSTREAM)
        data = (Metadata.parse(orig)
                ).format()

        self.assertEqual(data, orig)

    def test_coercion_noop(self):
        meta = Metadata('https://x.y.z/schema.json',
                        'abcdef0123456789',
                        'deadbeefdeadbeefdeadbeefdeadbeef',
                        datetime(2018, 1, 9, 13, 10, 59),
                        )

        self.assertEqual(meta, (
                'https://x.y.z/schema.json',
                'abcdef0123456789',
                'deadbeefdeadbeefdeadbeefdeadbeef',
                datetime(2018, 1, 9, 13, 10, 59),
                ))

    def test_coercion_change_all(self):
        meta = Metadata(Stringlike('https://x.y.z/schema.json'),
                        Hash('abcdef0123456789'),
                        Hash('deadbeefdeadbeefdeadbeefdeadbeef'),
                        '2018-01-09 13:10:59 (UTC)',
                        )

        self.assertEqual(meta, (
                'https://x.y.z/schema.json',
                'abcdef0123456789',
                'deadbeefdeadbeefdeadbeefdeadbeef',
                datetime(2018, 1, 9, 13, 10, 59),
                ))

    def test_validation_fail(self):
        baseargs = [
                'https://x.y.z/schema.json',
                'abcdef0123456789',
                'deadbeefdeadbeefdeadbeefdeadbeef',
                datetime(2018, 1, 9, 13, 10, 59),
                ]
        for i in range(len(baseargs)):
            with self.subTest(baseargs[i]):
                args = list(baseargs)
                args[i] = ''
                with self.assertRaises(ValueError):
                    Metadata(*args)

    def test_url(self):
        meta = Metadata(UPSTREAM,
                        'abcdef0123456789',
                        'deadbeefdeadbeefdeadbeefdeadbeef',
                        datetime(2018, 1, 9, 13, 10, 59),
                        )
        url = meta.url

        self.assertEqual(url, 'https://github.com/Microsoft/vscode-debugadapter-node/raw/abcdef0123456789/debugProtocol.json')  # noqa

    def test_format(self):
        meta = Metadata('https://x.y.z/schema.json',
                        'abcdef0123456789',
                        'deadbeefdeadbeefdeadbeefdeadbeef',
                        datetime(2018, 1, 9, 13, 10, 59),
                        )
        formatted = meta.format()

        self.assertEqual(formatted, dedent("""\
            upstream: https://x.y.z/schema.json
            revision: abcdef0123456789
            checksum: deadbeefdeadbeefdeadbeefdeadbeef
            date:     2018-01-09 13:10:59 (UTC)
            """))
